'''Machine Learning Workflow1. Define Goal2. Get Data3. Train-Test-Split4. Explore Data5. Feature Engineering6. Train Model(s)7. Optimize Hyperparameters / Cross Validation (Jump to Feature Engineering)8. Calculate Test Score9. Deploy and Monitor'''import pandas as pdimport numpy as npfrom scipy.stats import chi2_contingencymy_file = "data/train.csv"df = pd.read_csv(my_file)df.shapedf.head()df.columnsdf.dtypesdf.info() #use output for finding NaNs#set passngerid as indexdf.set_index('PassengerId', inplace = True)#set categorical values as dtype categorynum_cols = ['Age', 'SibSp', 'Parch', 'Fare']for col in df.columns:    if col not in num_cols:        df[col] = df[col].astype('category')#EDAdescriptives_num = df.describe(exclude=['category'])descriptives_numdescriptives_cat = df.describe(include=['category'])descriptives_catcat_cols = descriptives_cat.columnscat_cols#make contingency table for 'Survived' vs every category where unique < 10:#Survived*PclassPclass_crosstab = pd.crosstab(df['Survived'], df['Pclass'], margins=True)Pclass_crosstabPclass_crosstab_norm = pd.crosstab(df['Survived'], df['Pclass'], margins=True, normalize=True)Pclass_crosstab_norm#Survived*SexSex_crosstab = pd.crosstab(df['Survived'], df['Sex'], margins=True)Sex_crosstabSex_crosstab_norm = pd.crosstab(df['Survived'], df['Sex'], margins=True, normalize=True)Sex_crosstab_norm#Survived*Embarked (embarked has null values!)Embarked_crosstab = pd.crosstab(df['Survived'], df['Embarked'], margins=True)Embarked_crosstabEmbarked_crosstab_norm = pd.crosstab(df['Survived'], df['Embarked'], margins=True, normalize=True)Embarked_crosstab_norm#contingency tables without marginsPclass_crosstab = pd.crosstab(df['Survived'], df['Pclass'])Pclass_crosstab#Survived*SexSex_crosstab = pd.crosstab(df['Survived'], df['Sex'])Sex_crosstab#Survived*Embarked (embarked has null values!)Embarked_crosstab = pd.crosstab(df['Survived'], df['Embarked'])Embarked_crosstab#chi-squared test embarkedstat, p, dof, expected = chi2_contingency(Embarked_crosstab)alpha = 0.05print("p value is " + str(p))if p <= alpha:    print('Dependent (reject H0) ')else:    print('Independent (keep H0) ')    #Embarked is dependant    #chi-squared test sexstat, p, dof, expected = chi2_contingency(Sex_crosstab)alpha = 0.05print("p value is " + str(p))if p <= alpha:    print('Dependent (reject H0) ')else:    print('Independent (keep H0) ')#Sex is dependant    #chi-squared test pclassstat, p, dof, expected = chi2_contingency(Pclass_crosstab)alpha = 0.05print("p value is " + str(p))if p <= alpha:    print('Dependent (reject H0) ')else:    print('Independent (keep H0) ')#Class is dependent    #Do chi-squared tests for feature selection using skleans SelectKBestfrom sklearn.feature_selection import SelectKBestfrom sklearn.feature_selection import chi2y= df['Survived']X= df.select_dtypes(include=['category'])X = X.drop(['Survived'], axis=1)#replace NaNs with 'unknown'#X.fillna('unknown', inplace=True)chi2_selector = SelectKBest(chi2, k = 3)X_kbest = chi2_selector.fit_transform(X, y)#Value Error, this function does not work with strings#make a visualization of the cross tabs                                                                                                    